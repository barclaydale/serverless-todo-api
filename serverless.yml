
# Name of the service
service: cse204-wod-api

# Plugins enhancing serverless framework
plugins:
  # Locally dynamodb for local invokation and testing
  - serverless-dynamodb-local
  # Offline plugin for local development and testing
  - serverless-offline
  # s3 sync for frontend page
  - serverless-s3-sync
  # domain for api gateway
  - serverless-domain-manager

custom:

  siteName: cse204.kraigh.net
  localDir: static
  
  hostedZoneName: kraigh.net
  aliasHostedZoneId: Z2FDTNDATAQYW2
  aliasDNSName: dieqgzge2jzbt.cloudfront.net

  customDomain:
    domainName: api.kraigh.net
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: static

  # Offline plugin configuration
  serverless-offline:
    port: 4000
  
  # Local dynamodb configuration
  dynamodb:
    start:
      port: 9000
      inMemory: true
      migrate: true
      seed: true
    # Seed data for local wod table
    seed:
      wod:
        sources:
          - table: ${self:service}-wod-store
            sources: [./offline/seeds/data.json]
      
# Configure AWS as provider
provider:
  name: aws
  runtime: nodejs8.10
  # Name of dynamo db table used to store WODS
  environment: 
    WODS_TABLE: ${self:service}-wod-store
  # Roles required to operate on the dynamo db table
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.WODS_TABLE}"
    - Effect: Allow
      Action:
        - apigateway:POST
      Resource: "arn:aws:apigateway:us-east-1::/apikeys"
  # Configured as a dev stage
  stage: dev
  # Chosen AWS Region
  region: us-east-1

# FaaS funtions
functions:
  create:
    handler: wods/create.create
    # Configuring HTTP events to link API Gateway to Lambda
    events:
      - http:
          path: todwodsos
          method: POST
          cors: true
  get:
    handler: wods/get.get
    events:
      - http:
          path: wods/{id}
          method: GET
          cors: true
  update:
    handler: wods/update.update
    events:    
      - http:
          path: wods/{id}
          method: PUT
          cors: true
  delete:
    handler: wods/delete.delete          
    events:    
      - http:
          path: wods/{id}
          method: DELETE
          cors: true 
  list:
    handler: wods/list.list          
    events:    
      - http:
          path: wods
          method: GET
  apiKey:
    handler: wods/apiKey.create
    events:
      - http:
          path: apiKey
          method: POST
          cors: true        

# Confiure the resources required for this service: AWS Dynamo DB Table
resources:
  Resources:
    WodTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions: 
          - 
            AttributeName: "user"
            AttributeType: "S"
          - 
            AttributeName: "id"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "user"
            KeyType: "HASH"
          - 
            AttributeName: "id"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.WODS_TABLE}
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: ${self:custom.aliasDNSName}
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.hostedZoneName}.
        Name:
          Ref: StaticSite
        Type: 'A'

